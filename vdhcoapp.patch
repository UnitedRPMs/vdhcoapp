diff -ura package.orig/vdhcoapp-1.0.7/app/converter.js package.new/vdhcoapp-1.0.7/app/converter.js
--- a/app/converter.js	2017-11-14 08:35:27.000000000 -0300
+++ b/app/converter.js	2017-11-16 16:46:57.183615000 -0300
@@ -44,7 +44,7 @@
 else
 	throw new Error("Unsupported architecture",process.arch);
 
-const binaryDir = path.join(path.dirname(process.execPath),"..","converter","build",platform,arch);
+const binaryDir = platform == "linux" ? "/usr/bin" : path.join(path.dirname(process.execPath),"..","converter","build",platform,arch);
 const binaryPath = path.join(binaryDir,"ffmpeg");
 const probeBinaryPath = path.join(binaryDir,"ffprobe");
 const playBinaryPath = path.join(binaryDir,"ffplay");
diff -ura package.orig/vdhcoapp-1.0.7/app/native-autoinstall.js package.new/vdhcoapp-1.0.7/app/native-autoinstall.js
--- a/app/native-autoinstall.js	2017-11-14 08:35:27.000000000 -0300
+++ b/app/native-autoinstall.js	2017-11-16 17:36:30.888842000 -0300
@@ -72,7 +72,10 @@
 		mode = "system";
 	var config;
 	try {
-		config = JSON.parse(fs.readFileSync(path.resolve(path.dirname(process.execPath),"../config.json"),"utf8"));
+        if(process.platform == "linux")
+		    config = JSON.parse(fs.readFileSync(path.resolve(path.dirname(process.execPath),"../share/vdhcoapp/config.json"),"utf8"));
+		else
+            config = JSON.parse(fs.readFileSync(path.resolve(path.dirname(process.execPath),"../config.json"),"utf8"));
 	} catch(err) {
 		DisplayMessage("Cannot read config file: "+err.message,"Error");
 		process.exit(-1);
